File    = table
Product = wcp
Group:

Flavor = ANY
Qualifiers = "c2:py3:prof"

  Action = DefineFQ
    envSet (WCP_FQ_DIR, ${UPS_PROD_DIR}/${UPS_PROD_FLAVOR}-c2-py3-prof)

  Action = ExtraSetup
    setupRequired(root v6_18_02a -q +c2:+py3:+prof)
    setupRequired(boost v1_69_0 -q +c2:+prof)
    setupRequired(jsoncpp v1_7_7c -q +c2:+prof)
    setupRequired( clang v5_0_1 )

Flavor = ANY
Qualifiers = "c2:py3:debug"

  Action = DefineFQ
    envSet (WCP_FQ_DIR, ${UPS_PROD_DIR}/${UPS_PROD_FLAVOR}-c2-py3-debug)

  Action = ExtraSetup
    setupRequired(root v6_18_02a -q +c2:+py3:+debug)
    setupRequired(boost v1_69_0 -q +c2:+debug)
    setupRequired(jsoncpp v1_7_7c -q +c2:+debug)
    setupRequired( clang v5_0_1 )

Flavor = ANY
Qualifiers = "e17:py3:prof"

  Action = DefineFQ
    envSet (WCP_FQ_DIR, ${UPS_PROD_DIR}/${UPS_PROD_FLAVOR}-e17-py3-prof)

  Action = ExtraSetup
    setupRequired(root v6_18_02a -q +e17:+py3:+prof)
    setupRequired(boost v1_69_0 -q +e17:+prof)
    setupRequired(jsoncpp v1_7_7c -q +e17:+prof)
    setupRequired( gcc v7_3_0 )

Flavor = ANY
Qualifiers = "e17:py3:debug"

  Action = DefineFQ
    envSet (WCP_FQ_DIR, ${UPS_PROD_DIR}/${UPS_PROD_FLAVOR}-e17-py3-debug)

  Action = ExtraSetup
    setupRequired(root v6_18_02a -q +e17:+py3:+debug)
    setupRequired(boost v1_69_0 -q +e17:+debug)
    setupRequired(jsoncpp v1_7_7c -q +e17:+debug)
    setupRequired( gcc v7_3_0 )


Flavor = ANY
Qualifiers = "c2:prof"

  Action = DefineFQ
    envSet (WCP_FQ_DIR, ${UPS_PROD_DIR}/${UPS_PROD_FLAVOR}-c2-prof)

  Action = ExtraSetup
    setupRequired(root v6_18_02a -q +c2:+prof)
    setupRequired(boost v1_69_0 -q +c2:+prof)
    setupRequired(jsoncpp v1_7_7c -q +c2:+prof)
    setupRequired( clang v5_0_1 )

Flavor = ANY
Qualifiers = "c2:debug"

  Action = DefineFQ
    envSet (WCP_FQ_DIR, ${UPS_PROD_DIR}/${UPS_PROD_FLAVOR}-c2-debug)

  Action = ExtraSetup
    setupRequired(root v6_18_02a -q +c2:+debug)
    setupRequired(boost v1_69_0 -q +c2:+debug)
    setupRequired(jsoncpp v1_7_7c -q +c2:+debug)
    setupRequired( clang v5_0_1 )

Flavor = ANY
Qualifiers = "e17:prof"

  Action = DefineFQ
    envSet (WCP_FQ_DIR, ${UPS_PROD_DIR}/${UPS_PROD_FLAVOR}-e17-prof)

  Action = ExtraSetup
    setupRequired(root v6_18_02a -q +e17:+prof)
    setupRequired(boost v1_69_0 -q +e17:+prof)
    setupRequired(jsoncpp v1_7_7c -q +e17:+prof)
    setupRequired( gcc v7_3_0 )

Flavor = ANY
Qualifiers = "e17:debug"

  Action = DefineFQ
    envSet (WCP_FQ_DIR, ${UPS_PROD_DIR}/${UPS_PROD_FLAVOR}-e17-debug)

  Action = ExtraSetup
    setupRequired(root v6_18_02a -q +e17:+debug)
    setupRequired(boost v1_69_0 -q +e17:+debug)
    setupRequired(jsoncpp v1_7_7c -q +e17:+debug)
    setupRequired( gcc v7_3_0 )

Common:
   Action=setup
      proddir()
      setupenv()
      ExeActionRequired(DefineFQ)
      envSet (WCP_VERSION, ${UPS_PROD_VERSION} )
      # define the include directory
      envSet (WCP_INC, ${WCP_FQ_DIR}/include)
      # add the lib directory to LD_LIBRARY_PATH
      if    ( sh -c 'for dd in lib;do [ -d ${WCP_FQ_DIR}/$dd ] && exit;done;exit 1' )
          envSet( WCP_LIB, ${WCP_FQ_DIR}/lib )
      endif ( sh -c 'for dd in lib;do [ -d ${WCP_FQ_DIR}/$dd ] && exit;done;exit 1' )
      if    ( sh -c 'for dd in lib64;do [ -d ${WCP_FQ_DIR}/$dd ] && exit;done;exit 1' )
          envSet( WCP_LIB, ${WCP_FQ_DIR}/lib64 )
      endif ( sh -c 'for dd in lib64;do [ -d ${WCP_FQ_DIR}/$dd ] && exit;done;exit 1' )
      if ( test `uname` = "Darwin" )
	envPrepend(DYLD_LIBRARY_PATH, ${WCP_LIB})
      else()
	envPrepend(LD_LIBRARY_PATH, ${WCP_LIB})
      endif ( test `uname` = "Darwin" )
      # add the bin directory to the path
      pathPrepend(PATH, ${WCP_FQ_DIR}/bin )
      # useful variables
      envPrepend(ROOT_INCLUDE_PATH, ${WCP_INC} )
      envPrepend(CMAKE_PREFIX_PATH, ${WCP_FQ_DIR} )
      envPrepend(PKG_CONFIG_PATH, ${WCP_FQ_DIR} )
      # requirements
      exeActionRequired(ExtraSetup)
      setupRequired(eigen v3_3_4a)

End:
